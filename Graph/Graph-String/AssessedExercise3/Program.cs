using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssessedExercise3
{
    internal class Program
    {
        // Method to print a menu with a box around it.
        // This helps to visually separate the menu options from other console output.
        static void PrintBoxedMenu(string[] menuItems) 
        {
            // Calculate the length of the longest string to determine the width of the box.
            int longestString = menuItems.Max(str => str.Length);
            int boxWidth = longestString + 4; // Adding padding for aesthetics.

            // Draw the top border of the box.
            Console.Write("┌");
            Console.Write(new string('─', boxWidth));
            Console.WriteLine("┐");

            // Print each menu item, enclosed in a box.
            foreach (string item in menuItems)
            {
                Console.Write("│ ");
                Console.Write(item);
                // Calculate right padding to align all borders.
                Console.Write(new string(' ', boxWidth - item.Length - 2));
                Console.WriteLine(" │");
            }

            // Draw the bottom border of the box.
            Console.Write("└");
            Console.Write(new string('─', boxWidth));
            Console.WriteLine("┘");
        }

        static void Main(string[] args)
        {
            // Create a new Graph instance.
            Graph mygraph = new Graph();

            // Add nodes to the graph.
            mygraph.AddNode("Anwar");
            mygraph.AddNode("Dave");
            mygraph.AddNode("Rob");
            mygraph.AddNode("Haniy");
            mygraph.AddNode("Peggy");
            mygraph.AddNode("Rabia");

            // Create edges between nodes to form a directed graph.
            mygraph.AddEdge("Anwar", "Dave");
            mygraph.AddEdge("Anwar", "Rob");

            mygraph.AddEdge("Rob", "Haniy");

            mygraph.AddEdge("Dave", "Peggy");

            mygraph.AddEdge("Peggy", "Rob");

            mygraph.AddEdge("Peggy", "Rabia");

            mygraph.AddEdge("Rabia", "Anwar");

            // Clear the console and set up the color for the menu title.
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.Black;
            Console.BackgroundColor = ConsoleColor.Yellow;
            Console.WriteLine("*****************  Menu  ***************** \n");
            Console.ResetColor();  // Reset color to default after using.

            // Define menu options.
            string[] menuItems = {
                "1 : Return the number of nodes in a graph",
                "2 : Return the number of edges in a graph",
                "3 : Return a list of visited ids generated by a Breadth-First Search",
                "4 : Is it possible to traverse?"
            };

            // Print the menu.
            Console.ForegroundColor = ConsoleColor.Yellow;
            PrintBoxedMenu(menuItems);

            // Process user input continuously.
            while (true)
            {
                Console.WriteLine();
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.Write("Please enter a number from the above Menu: ");
                Console.ResetColor();  // Always reset the color.

                string option = Console.ReadLine();  // Read user input.
                Console.ResetColor();
                switch (option)
                {
                    case "1":
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Number of nodes: " + mygraph.Nodes.Count);
                        Console.ResetColor();
                        break;
                    case "2":
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Number of edges: " + mygraph.Number_of_edges());
                        Console.ResetColor();
                        break;
                    case "3":
                        Console.ForegroundColor = ConsoleColor.Red;
                        string result = mygraph.BFS("Dave");
                        Console.WriteLine("Visited nodes: " + result);
                        Console.ResetColor();
                        break;
                    case "4":
                        Console.WriteLine();
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        Console.Write("Please enter first name: ");
                        Console.ResetColor();
                        string name1 = Console.ReadLine();  // Read first name.

                        Console.ForegroundColor = ConsoleColor.Yellow;
                        Console.Write("Please enter second name: ");
                        Console.ResetColor();
                        string name2 = Console.ReadLine();  // Read second name.

                        bool isPossible = mygraph.Is_Travers_Possible(name1, name2);
                        Console.ForegroundColor = isPossible ? ConsoleColor.Green : ConsoleColor.Red;
                        Console.WriteLine();
                        Console.WriteLine(isPossible ? "True" : "False");
                        Console.ResetColor();
                        break;
                    default:
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Please enter a valid number between 1 to 4.");
                        Console.ResetColor();
                        break;
                }
            }
        }
    }
}
