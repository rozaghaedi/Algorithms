using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssessedExercise3
{
    internal class Program
    {
        // Method to print a menu with a box around it.
        static void PrintBoxedMenu(string[] menuItems)
        {
            int longestString = menuItems.Max(str => str.Length);
            int boxWidth = longestString + 4;

            Console.Write("┌");
            Console.Write(new string('─', boxWidth));
            Console.WriteLine("┐");

            foreach (string item in menuItems)
            {
                Console.Write("│ ");
                Console.Write(item);
                Console.Write(new string(' ', boxWidth - item.Length - 2));
                Console.WriteLine(" │");
            }

            Console.Write("└");
            Console.Write(new string('─', boxWidth));
            Console.WriteLine("┘");
        }

        static void Main(string[] args)
        {
            Graph myGraph = new Graph();

            // Add nodes to the graph using integer IDs.
            for (int i = 1; i <= 7; i++)
            {
                myGraph.AddNode(i);
            }

            // Create edges between nodes using integer IDs.
            myGraph.AddEdge(1, 2);
            myGraph.AddEdge(2, 6);
            myGraph.AddEdge(1, 6);
            myGraph.AddEdge(1, 4);
            myGraph.AddEdge(2, 3);
            myGraph.AddEdge(6, 7);
            myGraph.AddEdge(3, 5);
            myGraph.AddEdge(5, 7);

            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("*****************  Menu  *****************");
            Console.ResetColor();


            // Define the options that will appear in the menu.
            string[] menuItems = {
                "1 : Return the number of nodes in a graph",
                "2 : Return the number of edges in a graph",
                "3 : Return a list of visited ids generated by a Breadth-First Search",
                "4 : Check if traversal is possible between two nodes"
            };

            Console.ForegroundColor = ConsoleColor.Yellow;
            PrintBoxedMenu(menuItems);

            // Loop indefinitely to handle user input.
            while (true)
            {
                Console.WriteLine();
                Console.ForegroundColor = ConsoleColor.Cyan;// Set the text color to cyan for the prompt.
                Console.Write("Please enter a number from the above Menu: ");// Prompt the user to enter a selection based on the menu.
                Console.ResetColor();//// Reset the text color to default.


                // Read the user's input.
                string option = Console.ReadLine();
                // Handle the user's input based on the selected option.
                switch (option)
                {
                    case "1":
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Number of nodes: " + myGraph.Nodes.Count);
                        Console.ResetColor();
                        break;
                    case "2":
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Number of edges: " + myGraph.Number_of_edges());
                        Console.ResetColor();
                        break;
                    case "3":
                        // Set text color to red and prompt for a starting node ID.
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.Write("Enter starting node ID for BFS: ");
                        int startId = int.Parse(Console.ReadLine());
                        string result = myGraph.BFS(startId);// Perform BFS starting from the given node and display the result.
                        Console.WriteLine("Visited nodes: " + result);
                        Console.ResetColor();
                        break;
                    case "4":
                        // Prompt for the first node ID.
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        Console.Write("Please enter first node ID: ");

                        Console.ResetColor();
                        int nodeId1 = int.Parse(Console.ReadLine());

                        // Prompt for the second node ID.
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        Console.Write("Please enter second node ID: ");
                        Console.ResetColor();
                        int nodeId2 = int.Parse(Console.ReadLine());


                        // Check if traversal is possible between the two nodes and display the result.
                        bool isPossible = myGraph.Is_Travers_Possible(nodeId1, nodeId2);
                        Console.ForegroundColor = isPossible ? ConsoleColor.Green : ConsoleColor.Red;
                        Console.WriteLine("Traversal possible: " + (isPossible ? "Yes" : "No"));
                        Console.ResetColor();
                        break;
                    default:
                        // Handle invalid input.
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Please enter a valid number between 1 and 4.");
                        Console.ResetColor();
                        break;
                }
            }
        }
    }
}
